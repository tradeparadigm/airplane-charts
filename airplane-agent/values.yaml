replicaCount: 3

airplane:
  # Specify either apiToken or apiTokenSecret, not both
  apiToken: ""
  apiTokenSecret:
    name: ""
    key: ""
  # Specify either teamID or teamIDSecret, not both
  teamID: ""
  teamIDSecret:
    name: ""
    key: ""

  agentLabels: {}
  runNamespace: default
  envSlug: ""

  apiHost: https://api.airplane.dev
  temporalHost: temporal-api.airplane.dev:443
  mtaAgent: false
  runtimeClass: ""
  # Node selectors to use when scheduling runs.
  # Accepts a map of key-value pairs where keys are node labels and values
  # are the expected value for that label. For example:
  # - my_node_label: my_expected_label_value
  nodeSelector: {}
  # Tolerations to use when scheduling runs. Each toleration will have an operator
  # of "Equal" and an effect of "NoSchedule".
  # Accepts a map of key-value pairs. For example:
  # - my_toleration_key: my_toleration_value
  tolerations: {}
  # Deprecated. Use "dnsPolicy: ClusterFirst" instead.
  clusterFirstDNS: false
  # The DNS policy to apply to runs.
  # Accepts any of "Default", "ClusterFirst", "ClusterFirstWithHostNet", and "None".
  # See: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
  dnsPolicy: Default
  serviceJWTSecret:
    name: ""
    key: ""
  autoUpgrade: true
  # A random identifier, such as a UUIDv4, that uniquely identifies this agent within your team.
  # By default, this is regenerated every time the chart runs but can be overridden to keep it consistent.
  randomLockID: ""

  # The name of the service account to run task pods under. If unset, they'll use the
  # default service account in the runNamespace.
  taskServiceAccountName: ""

  # Set to true if you're running inside AWS and want to use ECR-sourced public
  # images. This can improve performance and may reduce networking costs.
  useECRPublicImages: false

  # For development purposes only.
  debugMode: false

image:
  repository: us-docker.pkg.dev/airplane-prod/public/agentv2
  pullPolicy: Always

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

rbac:
  create: true

serviceAccount:
  create: true
  annotations: {}

podSecurityContext: {}

securityContext: {}

# Node selectors to use when scheduling agents.
# Accepts a map of key-value pairs where keys are node labels and values
# are the expected value for that label. For example:
# - my_node_label: my_expected_label_value
nodeSelector: {}

# Tolerations to use when scheduling agents.
# Accepts a list of tolerations. For example:
# - key: "my_toleration_key"
#   operator: "Equal"
#   value: "my_toleration_value"
#   effect: "NoSchedule"
tolerations: []

affinity: {}

extraLabels: {}

sentry:
  dsn: ""
  environment: ""
