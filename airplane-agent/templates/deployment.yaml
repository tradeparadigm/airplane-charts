apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "kubernetes_agent.fullname" . }}
  labels:
    {{- include "kubernetes_agent.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "kubernetes_agent.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "kubernetes_agent.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "kubernetes_agent.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{ $image := printf "%s:%s" .Values.image.repository .Chart.AppVersion -}}
          image: "{{ $image }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: AP_API_TOKEN
              {{- if .Values.airplane.apiToken }}
              value: "{{ .Values.airplane.apiToken }}"
              {{- else if .Values.airplane.apiTokenSecret.name }}
              valueFrom:
                secretKeyRef:
                  {{- toYaml .Values.airplane.apiTokenSecret | nindent 18 }}
              {{- else }}
              value: ""
              {{- end }}
            - name: AP_TEAM_ID
              {{- if .Values.airplane.teamID }}
              value: "{{ .Values.airplane.teamID }}"
              {{- else if .Values.airplane.teamIDSecret.name }}
              valueFrom:
                secretKeyRef:
                  {{- toYaml .Values.airplane.teamIDSecret | nindent 18 }}
              {{- else }}
              value: ""
              {{- end }}
            - name: AP_API_HOST
              value: "{{ .Values.airplane.apiHost }}"
            - name: AP_DRIVER
              value: "kubernetes"
            - name: AP_K8S_NAMESPACE
              value: "{{ .Values.airplane.runNamespace }}"
            - name: AP_K8S_RUNTIME_CLASS
              value: "{{ .Values.airplane.runtimeClass }}"
            - name: AP_K8S_TOLERATIONS
              value: "{{- range $key, $val := .Values.airplane.tolerations }}{{ $key }}={{ $val }};{{- end }}"
            - name: AP_K8S_NODE_SELECTOR
              value: "{{- range $key, $val := .Values.airplane.nodeSelector }}{{ $key }}={{ $val }};{{- end }}"
            - name: AP_LABELS
              value: "airplane_installer:helm
                {{- range $key, $val := .Values.airplane.agentLabels }} {{ $key }}:{{ $val }}
                {{- end }}"
            - name: AP_MTA_AGENT
              value: "{{ .Values.airplane.mtaAgent | toString }}"
            - name: AP_PORT
              value: "8080"
            - name: AP_SERVICE_JWT_SECRET
              {{- if .Values.airplane.serviceJWTSecret.name }}
              valueFrom:
                secretKeyRef:
                  {{- toYaml .Values.airplane.serviceJWTSecret | nindent 18 }}
              {{- else }}
              value: ""
              {{- end }}
            - name: AP_AUTO_UPGRADE
              value: "{{ .Values.airplane.autoUpgrade }}"
            - name: AP_AGENT_IMAGE
              value: "{{ $image }}"
            - name: SENTRY_DSN
              value: "{{ .Values.sentry.dsn }}"
            - name: SENTRY_ENVIRONMENT
              value: "{{ .Values.sentry.environment }}"
            - name: AP_ENVIRONMENT
              value: "{{ .Values.sentry.environment }}"
            - name: AP_LOCK_KEY
              {{- if .Values.airplane.randomLockID }}
              value: "helm-{{ .Values.airplane.randomLockID }}"
              {{- else }}
              value: "helm-{{ uuidv4 }}"
              {{- end }}
            - name: AP_ENV_SLUG
              value: "{{ .Values.airplane.envSlug }}"
            - name: AP_K8S_DNS_POLICY
              value: "{{ .Values.airplane.dnsPolicy }}"
            - name: AP_K8S_CLUSTER_FIRST_DNS
              value: "{{ .Values.airplane.clusterFirstDNS | toString }}"
            - name: AP_RUNNER_TEMPORAL_HOST
              value: "{{ .Values.airplane.temporalHost }}"
            - name: AP_K8S_SERVICE_ACCOUNT_NAME
              value: "{{ .Values.airplane.taskServiceAccountName }}"
            - name: AP_LOCALDEV
              value: "{{ .Values.airplane.debugMode }}"
            - name: AP_DEBUG_LOGGING
              value: "{{ .Values.airplane.debugMode }}"
            - name: AP_USE_ECR_PUBLIC_IMAGES
              value: "{{ .Values.airplane.useECRPublicImages }}"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
